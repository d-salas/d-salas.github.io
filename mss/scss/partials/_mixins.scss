/*
Take up the whole dang window
*/

@mixin full-screen {
  min-height: 100vh;
  width: 100vw;
}


/*	
	MISCELLANEOUS
*/

// Z-levels FROM MATERIALIZECSS
.z-depth-0 {
  box-shadow: none !important;
}
.z-depth-1{
  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
}
.z-depth-1-half{
  box-shadow: 0 5px 11px 0 rgba(0, 0, 0, 0.18), 0 4px 15px 0 rgba(0, 0, 0, 0.15);
}
.z-depth-2{
  box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}
.z-depth-3{
  box-shadow: 0 12px 15px 0 rgba(0, 0, 0, 0.24), 0 17px 50px 0 rgba(0, 0, 0, 0.19);
}
.z-depth-4{
  box-shadow: 0 16px 28px 0 rgba(0, 0, 0, 0.22), 0 25px 55px 0 rgba(0, 0, 0, 0.21);
}
.z-depth-5{
  box-shadow: 0 27px 24px 0 rgba(0, 0, 0, 0.2), 0 40px 77px 0 rgba(0, 0, 0, 0.22);
}

.hoverable:hover {
  transition: box-shadow .25s;
  box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

/* 
  Border-serrated - a zig zag triangle border with linear gradient
*/
// @mixin border-top-serrated($size, $color-outer) {
//     & {
//         position: relative;
//         overflow: auto;
//         padding-top: $size;
//     }  
//     &:before {
//         top: 0px;
//         background-position: left top;
//         @include background(linear-gradient(-135deg, $color-outer $size / 2, transparent 0), linear-gradient(135deg, $color-outer $size / 2, transparent 0));
//         @include border-serrated-helper($size, $color-outer);
//     }
// }
// @mixin border-bottom-serrated($size, $color-outer) {
//     & {
//         position: relative;
//   overflow: auto;
//         padding-bottom: $size;
//     }
//     &:after {
//         bottom: 0px;
//         background-position: left bottom;
//         @include background(linear-gradient(-45deg, $color-outer $size / 2, transparent 0), linear-gradient(45deg, $color-outer $size / 2, transparent 0));
//         @include border-serrated-helper($size, $color-outer);
//     }
// }

// @mixin border-serrated-helper($size, $color-outer) {
//     content: " ";
//     display: block;
//     position: absolute;
//     left: 0px;
//     width: 100%;
//     height: $size;
//     background-repeat: repeat-x;
//     background-size: $size $size;
// }


// always use even numbers for size (or else you will get half pixel for height). Without 'px'. Only works with pixels
/**
 * Jagged Border
 *
 * $location - [top, bottom, left, right]
 * $type - [fill, border]
 * $side - [inside, outside]
 *
 * @param {Object} data - xhr
 */

@mixin jagged($color: 000, $size: 16, $location: bottom, $type: fill, $side: outside, $animate: false) {
  @if str-index(#{$color}, '#') {
    $color: str-slice(#{$color}, 2);
  }

  $width: $size;
  $height: $width / 2;
  $scale: $width / 16;
  $rotate: '0';
  $pseudo: if($location == top or $location == left, before, after);

  @if $side == inside {
    @if $location == bottom {
      $rotate: '180 8 4';
    } @else if $location == left {
      $height: $size;
      $rotate: '270 8 8';
      $width: $size / 2;
    } @else if $location == right {
      $height: $size;
      $rotate: '90 4 4';
      $width: $size / 2;
    }
  }
  @else {
    @if $location == top {
      $rotate: '180 8 4';
    } @else if $location == right {
      $rotate: '270 8 8';
      $height: $size;
      $width: $size / 2;
    } @else if $location == left {
      $rotate: '90 4 4';
      $height: $size;
      $width: $size / 2;
    }
  }
  $arrow: "data:image/svg+xml,%3Csvg%20width%3D%22#{$width}px%22%20height%3D%22#{$height}px%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpolygon%20points%3D%220%2C%200%208%2C%208%2016%2C0%22%20fill%3D%22%23#{$color}%22%20transform%3D%22scale%28#{$scale}%29%20rotate%28#{$rotate}%29%22%3E%3C%2Fpolygon%3E%3C%2Fsvg%3E";
  $wave: "data:image/svg+xml,%3Csvg%20width%3D%22#{$width}px%22%20height%3D%22#{$height}px%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M8.00025863%2C0%20L0%2C6.59417725%20L0%2C8%20L8.00025885%2C1.40509033%20L16%2C8%20L16%2C6.59417725%20L8.00025863%2C0%20Z%22%20fill%3D%22%23#{$color}%22%20transform%3D%22scale%28#{$scale}%29%20rotate%28#{$rotate}%29%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E";
  position: relative;

  &:#{$pseudo} {
    background-repeat: if($location == bottom or $location == top, repeat-x, repeat-y);
    content: '';
    position: absolute;
    z-index: 10;
    

    @if $animate {
      animation-duration: $animate;
      animation-iteration-count: 1;
      animation-name: if($location == bottom or $location == top, slide-hoz, slide-vet);
    }

    @if $location == top {
      height: #{$height}px;
      left: 0;
      right: 0;

      @if $side == inside {
        top: 0;
      } @else {
        top: -#{$height}px;
      }
    }
    @else if $location == right {
      bottom: 0;
      top: 0;
      width: #{$width}px;

      @if $side == inside {
        right: 0;
      } @else {
        right: -#{$width}px;
      }
    }
    @else if $location == bottom {
      height: #{$height}px;
      left: 0;
      right: 0;

      @if $side == inside {
        bottom: 0;
      } @else {
        bottom: -#{$height}px;
      }
    }
    @else if $location == left {
      bottom: 0;
      top: 0;
      width: #{$width}px;

      @if $side == inside {
        left: 0;
      } @else {
        left: -#{$width}px;
      }
    }

    @if $location == top {
      @if $side == inside {
        background-image: url($arrow);
      } @else {
        @if $type == fill {
          background-image: url($arrow);
        } @else {
          background-image: url($wave);
        }
      }

    }
    @else {
      @if $side == inside {
        background-image: url($arrow);
      } @else {
        @if $type == fill {
          background-image: url($arrow);
        } @else {
          background-image: url($wave);
        }
      }
    }
  }

  @keyframes slide-hoz {
    from {
      width: 0;
    }

    to {
      width: 100%;
    }
  }

  @keyframes slide-vet {
    from {
      height: 0;
    }

    to {
      height: 100%;
    }
  }
}


/* ==========================================================================
   	Hover Styles
   ========================================================================== */

/* Underline Reveal */
.hvr-underline-reveal {
	//padding-bottom: 10px;
  display: inline-block;
  vertical-align: middle;
  -webkit-transform: translateZ(0);
  transform: translateZ(0);
  box-shadow: 0 0 2px rgba(0, 0, 0, 0);
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  -moz-osx-font-smoothing: grayscale;
  position: relative;
  overflow: hidden;
}
.hvr-underline-reveal:before {
  content: "";
  position: absolute;
  z-index: -1;
  left: 0;
  right: 0;
  bottom: 0;
  background: $white;
  height: 2px;
  -webkit-transform: translateY(3px);
  transform: translateY(3px);
  -webkit-transition-property: transform;
  transition-property: transform;
  -webkit-transition-duration: 0.2s;
  transition-duration: 0.2s;
  -webkit-transition-timing-function: ease-out;
  transition-timing-function: ease-out;
}
.hvr-underline-reveal:hover:before, .hvr-underline-reveal:focus:before, .hvr-underline-reveal:active:before {
  -webkit-transform: translateY(0);
  transform: translateY(0);
}




